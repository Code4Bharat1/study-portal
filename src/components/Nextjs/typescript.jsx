"use client";

const NextTypeScript = () => {
  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white p-6 rounded-lg shadow-md max-w-4xl mx-auto my-8">
        <h1 className="text-4xl font-bold mb-6">Using TypeScript in Next.js</h1>
        <p className="mb-4">
          <span className="font-semibold">For Beginners:</span> TypeScript is like a checklist for a chef, ensuring every ingredient (code) is correct before cooking (building) a dish (website). In Next.js, it helps make your website reliable and easier to manage.  
          <span className="font-semibold">For Coders:</span> TypeScript is a typed superset of JavaScript that adds static types to Next.js projects, improving code safety, developer experience, and maintainability in both Pages and App Router.
        </p>

        {/* What is TypeScript? */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">1. What is TypeScript?</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> TypeScript is like a recipe checklist that tells the chef exactly what ingredients to use and catches mistakes, like using sugar instead of salt, before cooking.  
            <span className="font-semibold">For Coders:</span> TypeScript extends JavaScript with static types, enabling compile-time type checking to catch errors early, enhance autocompletion, and improve refactoring in Next.js apps.
          </p>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> It makes your website less likely to have errors, like a perfect cake every time.  
            <span className="font-semibold">For Coders:</span> TypeScript integrates seamlessly with Next.js, supporting typed components, API routes, and data fetching methods like <code>getStaticProps</code> or server components.
          </p>
        </section>

        {/* Setting Up TypeScript in Next.js */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">2. Setting Up TypeScript in Next.js</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> Adding TypeScript to your website is like giving your chef a checklist template. You set it up once, and it guides you as you cook.  
            <span className="font-semibold">For Coders:</span> Initialize a Next.js project with TypeScript support using <code>create-next-app</code> or add it to an existing project by creating a <code>tsconfig.json</code> file.
          </p>
          <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-4">
            <code>{`# Create a new Next.js project with TypeScript
npx create-next-app@latest --ts my-app

# OR add TypeScript to an existing project
touch tsconfig.json

# Install TypeScript and necessary types
npm install --save-dev typescript @types/react @types/node

# Example tsconfig.json (auto-generated by Next.js)
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}`}</code>
          </pre>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> This sets up your checklist so your chef (Next.js) knows how to use TypeScript to make perfect dishes (pages).  
            <span className="font-semibold">For Coders:</span> Running <code>create-next-app --ts</code> sets up TypeScript automatically, or manually add <code>tsconfig.json</code> and install dependencies. Next.js auto-populates <code>tsconfig.json</code> with sensible defaults for strict type checking and JSX support.
          </p>
        </section>

        {/* Basic TypeScript Example */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">3. Example: A Typed Component</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> With TypeScript, you tell your chef what kind of ingredients (data) a dish (component) needs, so there are no surprises.  
            <span className="font-semibold">For Coders:</span> TypeScript allows you to define props types for components, ensuring correct data is passed and catching errors during development.
          </p>
          <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-4">
            <code>{`// app/@/components/Greeting.tsx
type GreetingProps = {
  name: string;
  age?: number; // Optional prop
};

export default function Greeting({ name, age }: GreetingProps) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      {age && <p>You are {age} years old.</p>}
    </div>
  );
}

// Usage in a page
// app/greeting/page.tsx
import Greeting from '../@/components/Greeting';

export default function GreetingPage() {
  return <Greeting name="Alice" age={25} />;
}`}</code>
          </pre>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> This dish (component) expects a name and maybe an age, like a recipe needing flour and optional sugar. If you forget the name, TypeScript warns you.  
            <span className="font-semibold">For Coders:</span> The <code>GreetingProps</code> type ensures <code>name</code> is a string and <code>age</code> is optional. TypeScript catches errors (e.g., passing a number for <code>name</code>) in your IDE or build process, improving reliability.
          </p>
        </section>

        {/* TypeScript with Data Fetching */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">4. TypeScript with Data Fetching</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> Sometimes your chef needs to fetch ingredients (data) from a market (API). TypeScript ensures the ingredients are what you expect, like fresh apples, not oranges.  
            <span className="font-semibold">For Coders:</span> TypeScript enhances data fetching in Next.js by typing API responses, props, and parameters for <code>getStaticProps</code> or server components.
          </p>
          <pre className="bg-gray-100 p-4 rounded text-sm overflow-x-auto mb-4">
            <code>{`// pages/products.tsx (Pages Router)
type Product = {
  id: number;
  name: string;
  price: number;
};

export async function getStaticProps() {
  // Simulate API call
  const products: Product[] = [
    { id: 1, name: 'Cake', price: 20 },
    { id: 2, name: 'Cookie', price: 5 },
  ];
  return {
    props: {
      products,
    },
    revalidate: 3600, // ISR: Revalidate hourly
  };
}

export default function ProductsPage({ products }: { products: Product[] }) {
  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - \${product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}

// app/products/page.tsx (App Router)
type Product = {
  id: number;
  name: string;
  price: number;
};

async function fetchProducts(): Promise<Product[]> {
  // Simulate API call
  return [
    { id: 1, name: 'Cake', price: 20 },
    { id: 2, name: 'Cookie', price: 5 },
  ];
}

export const revalidate = 3600; // ISR: Revalidate hourly

export default async function ProductsPage() {
  const products = await fetchProducts();
  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - \${product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}`}</code>
          </pre>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> This recipe (page) lists products, and TypeScript ensures the ingredients (data) are correct, like checking you got cakes, not pies.  
            <span className="font-semibold">For Coders:</span> The <code>Product</code> type defines the shape of API data. In Pages Router, <code>getStaticProps</code> returns typed props with ISR. In App Router, server components fetch typed data directly, with <code>revalidate</code> for ISR. TypeScript ensures type safety for props and API responses.
          </p>
        </section>

        {/* When to Use TypeScript */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">5. When to Use TypeScript?</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> Use TypeScript when you want your chef to follow a checklist to avoid mistakes, especially for big or teamwork recipes (projects).  
            <span className="font-semibold">For Coders:</span> TypeScript is ideal for projects requiring robust code, team collaboration, or complex data handling, enhancing Next.js development.
          </p>
          <ul className="list-disc ml-6 mb-4">
            <li>
              <span className="font-semibold">Beginners:</span> Big websites with lots of pages, like a bakery chain.  
              <span className="font-semibold">Coders:</span> Large-scale applications with multiple components and API integrations.
            </li>
            <li>
              <span className="font-semibold">Beginners:</span> Team projects where many chefs work together.  
              <span className="font-semibold">Coders:</span> Collaborative projects needing clear interfaces and type safety.
            </li>
            <li>
              <span className="font-semibold">Beginners:</span> Websites with complex recipes, like custom orders.  
              <span className="font-semibold">Coders:</span> Apps with complex data structures or third-party APIs.
            </li>
            <li>
              <span className="font-semibold">Beginners:</span> Projects you want to keep error-free over time.  
              <span className="font-semibold">Coders:</span> Long-term projects benefiting from refactoring and IDE support.
            </li>
          </ul>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> It makes your website stronger and easier to fix, like a foolproof recipe!  
            <span className="font-semibold">For Coders:</span> TypeScript improves code quality, reduces runtime errors, and boosts productivity with IDE features like autocompletion and type hints.
          </p>
        </section>

        {/* Final Thoughts */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4">6. Final Thoughts</h2>
          <p className="mb-4">
            <span className="font-semibold">For Beginners:</span> TypeScript is like a trusty checklist that helps your chef create perfect dishes every time, making your website reliable and fun to build.  
            <span className="font-semibold">For Coders:</span> TypeScript enhances Next.js with type safety, better tooling, and scalability. Use it for typed components, API routes, and data fetching, and leverage strict mode in <code>tsconfig.json</code> for robust code. Explore libraries like <code>zod</code> for runtime validation in complex apps.
          </p>
        </section>

        <p className="italic text-blue-300">
          Cook up a flawless Next.js website with TypeScript, ensuring every ingredient is perfect for a delightful user experience!
        </p>
      </div>
    </div>
  );
};

export default NextTypeScript;