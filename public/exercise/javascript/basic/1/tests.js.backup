// Browser-compatible test for JavaScript Basic Exercise 1: Variables and Data Types
// This test runs in the Monaco Editor environment

console.log("üß™ Running JavaScript Basic Exercise 1 Tests...");

// Test configuration for Monaco Editor
const testConfig = {
  exerciseTitle: "Variables and Data Types",
  language: "javascript",
  requirements: [
    "Create variables of different data types",
    "Use console.log to display variables",
    "Include string, number, boolean, array, and object variables",
    "Use proper variable naming conventions"
  ]
};

// Test functions that work in browser environment
function runTests(userCode) {
  const results = {
    syntaxCheckPassed: false,
    structureCheckPassed: false,
    functionalityCheckPassed: false,
    errors: [],
    warnings: [],
    structureChecks: [],
    score: 0
  };

  try {
    // 1. Syntax Check
    results.syntaxCheckPassed = checkSyntax(userCode, results);
    
    // 2. Structure Check
    results.structureCheckPassed = checkStructure(userCode, results);
    
    // 3. Functionality Check
    results.functionalityCheckPassed = checkFunctionality(userCode, results);
    
    // 4. Calculate Score
    calculateScore(results);
    
    return results;
  } catch (error) {
    results.errors.push(`Test execution error: ${error.message}`);
    return results;
  }
}

function checkSyntax(code, results) {
  try {
    new Function(code);
    console.log("‚úÖ Syntax check passed");
    return true;
  } catch (error) {
    console.log("‚ùå Syntax error:", error.message);
    results.errors.push(`Syntax Error: ${error.message}`);
    return false;
  }
}

function checkStructure(code, results) {
  let passed = true;
  
  // Check for console.log statements
  const hasConsoleLog = /console\.log\s*\(/.test(code);
  if (hasConsoleLog) {
    console.log("‚úÖ Found console.log statement(s)");
    results.structureChecks.push("‚úÖ Found console.log statement(s)");
  } else {
    console.log("‚ùå No console.log statements found");
    results.structureChecks.push("‚ùå No console.log statements found");
    passed = false;
  }

  // Check for variable declarations
  const hasVariables = /\b(let|const|var)\s+\w+/.test(code);
  if (hasVariables) {
    console.log("‚úÖ Found variable declarations");
    results.structureChecks.push("‚úÖ Found variable declarations");
  } else {
    console.log("‚ùå No variable declarations found");
    results.structureChecks.push("‚ùå No variable declarations found");
    passed = false;
  }

  // Check for different data types
  const hasString = /['"`].*['"`]/.test(code);
  const hasNumber = /\b\d+(\.\d+)?\b/.test(code);
  const hasBoolean = /\b(true|false)\b/.test(code);
  const hasArray = /\[.*\]/.test(code);
  const hasObject = /\{.*\}/.test(code);

  let dataTypeCount = 0;
  if (hasString) {
    console.log("‚úÖ Found string literal");
    results.structureChecks.push("‚úÖ Found string literal");
    dataTypeCount++;
  }
  if (hasNumber) {
    console.log("‚úÖ Found number literal");
    results.structureChecks.push("‚úÖ Found number literal");
    dataTypeCount++;
  }
  if (hasBoolean) {
    console.log("‚úÖ Found boolean literal");
    results.structureChecks.push("‚úÖ Found boolean literal");
    dataTypeCount++;
  }
  if (hasArray) {
    console.log("‚úÖ Found array literal");
    results.structureChecks.push("‚úÖ Found array literal");
    dataTypeCount++;
  }
  if (hasObject) {
    console.log("‚úÖ Found object literal");
    results.structureChecks.push("‚úÖ Found object literal");
    dataTypeCount++;
  }

  if (dataTypeCount >= 3) {
    console.log(`‚úÖ Found ${dataTypeCount} different data types`);
    results.structureChecks.push(`‚úÖ Found ${dataTypeCount} different data types`);
  } else {
    console.log(`‚ùå Only found ${dataTypeCount} data types (need at least 3)`);
    results.structureChecks.push(`‚ùå Only found ${dataTypeCount} data types (need at least 3)`);
    passed = false;
  }

  return passed;
}

function checkFunctionality(code, results) {
  try {
    // Capture console.log output
    const logs = [];
    const originalLog = console.log;
    
    // Mock console.log to capture output
    const mockConsole = {
      log: (...args) => {
        logs.push(args.map(arg => 
          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' '));
      }
    };

    // Execute user code with mocked console
    const executeCode = new Function('console', code);
    executeCode(mockConsole);

    if (logs.length > 0) {
      console.log("‚úÖ Code executed and produced output");
      results.output = logs.join('\n');
      return true;
    } else {
      console.log("‚ùå Code executed but produced no output");
      results.warnings.push("Code executed but produced no console output");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Runtime error:", error.message);
    results.errors.push(`Runtime Error: ${error.message}`);
    return false;
  }
}

function calculateScore(results) {
  let score = 0;
  
  if (results.syntaxCheckPassed) score += 30;
  if (results.structureCheckPassed) score += 50;
  if (results.functionalityCheckPassed) score += 20;
  
  results.score = Math.min(score, 100);
  
  console.log(`üìä Final Score: ${results.score}/100`);
}

// Export for Monaco Editor testing system
if (typeof window !== 'undefined') {
  window.exerciseTest = { runTests, testConfig };
}

console.log("‚úÖ Test file loaded successfully");
console.log("Requirements:", testConfig.requirements.join(", "));