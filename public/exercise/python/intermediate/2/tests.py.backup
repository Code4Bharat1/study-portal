# Simple Browser-Compatible Test for List Comprehensions
# This test runs in the Monaco Editor environment without external dependencies

print("🧪 Running Python Intermediate Exercise 2: List Comprehensions")

def run_simple_test(user_code):
    """Simple test function that works in browser environment"""
    results = {
        "passed": False,
        "score": 0,
        "message": "",
        "details": []
    }
    
    try:
        # Basic checks
        if not user_code or len(user_code.strip()) < 10:
            results["message"] = "Code is too short or empty"
            results["score"] = 0
            return results
        
        # Check for basic Python syntax elements
        checks = []
        score = 0
        
        # Check for print statements
        if "print(" in user_code:
            checks.append("✅ Found print statement")
            score += 25
        else:
            checks.append("❌ No print statement found")
        
        # Check for variable assignments
        if "=" in user_code and not user_code.count("=") == user_code.count("=="):
            checks.append("✅ Found variable assignment")
            score += 25
        else:
            checks.append("❌ No variable assignment found")
        
        # Check for basic structure
        lines = [line.strip() for line in user_code.split('\n') if line.strip() and not line.strip().startswith('#')]
        if len(lines) >= 3:
            checks.append("✅ Code has good structure")
            score += 25
        else:
            checks.append("❌ Code needs more structure")
        
        # Check for topic-specific elements
        topic_lower = "List Comprehensions".lower()
        if "variable" in topic_lower and ("=" in user_code):
            checks.append("✅ Topic-specific content found")
            score += 25
        elif "function" in topic_lower and ("def " in user_code):
            checks.append("✅ Topic-specific content found")
            score += 25
        elif "loop" in topic_lower and ("for " in user_code or "while " in user_code):
            checks.append("✅ Topic-specific content found")
            score += 25
        else:
            checks.append("⚠️ Consider adding topic-specific content")
            score += 10
        
        results["details"] = checks
        results["score"] = min(score, 100)
        results["passed"] = score >= 75
        results["message"] = f"Test completed with score: {results['score']}/100"
        
        return results
        
    except Exception as e:
        results["message"] = f"Test error: {str(e)}"
        results["score"] = 0
        return results

# Test configuration
test_config = {
    "topic": "List Comprehensions",
    "language": "python",
    "level": "intermediate",
    "exercise": 2
}

print("✅ Simple test loaded successfully")
print(f"Topic: {test_config['topic']}")