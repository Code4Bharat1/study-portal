# Browser-compatible test for Python Basic Exercise 1: Variables and Data Types
# This test runs in the Monaco Editor environment

print("üß™ Running Python Basic Exercise 1 Tests...")

# Test configuration for Monaco Editor
test_config = {
    "exerciseTitle": "Variables and Data Types",
    "language": "python",
    "requirements": [
        "Create variables of different data types",
        "Use print() to display variables",
        "Include string, number, boolean, list, and dictionary variables",
        "Use proper variable naming conventions"
    ]
}

def run_tests(user_code):
    results = {
        "syntaxCheckPassed": False,
        "structureCheckPassed": False,
        "functionalityCheckPassed": False,
        "errors": [],
        "warnings": [],
        "structureChecks": [],
        "score": 0
    }
    
    try:
        # 1. Syntax Check
        results["syntaxCheckPassed"] = check_syntax(user_code, results)
        
        # 2. Structure Check
        results["structureCheckPassed"] = check_structure(user_code, results)
        
        # 3. Functionality Check
        results["functionalityCheckPassed"] = check_functionality(user_code, results)
        
        # 4. Calculate Score
        calculate_score(results)
        
        return results
    except Exception as error:
        results["errors"].append(f"Test execution error: {str(error)}")
        return results

def check_syntax(code, results):
    try:
        # Basic Python syntax check
        lines = code.split('\n')
        for i, line in enumerate(lines):
            stripped = line.strip()
            if not stripped or stripped.startswith('#'):
                continue
                
            # Check for basic syntax issues
            if stripped.endswith(':'):
                # Should be followed by indented block
                if i + 1 < len(lines):
                    next_line = lines[i + 1]
                    if next_line.strip() and not (next_line.startswith(' ') or next_line.startswith('\t')):
                        results["errors"].append(f"Indentation error after line {i + 1}")
                        return False
        
        print("‚úÖ Syntax check passed")
        return True
    except Exception as error:
        print(f"‚ùå Syntax error: {str(error)}")
        results["errors"].append(f"Syntax Error: {str(error)}")
        return False

def check_structure(code, results):
    passed = True
    
    # Check for print statements
    if "print(" in code:
        print("‚úÖ Found print statement(s)")
        results["structureChecks"].append("‚úÖ Found print statement(s)")
    else:
        print("‚ùå No print statements found")
        results["structureChecks"].append("‚ùå No print statements found")
        passed = False
    
    # Check for variable assignments
    import re
    has_variables = re.search(r'\w+\s*=\s*.+', code)
    if has_variables:
        print("‚úÖ Found variable assignments")
        results["structureChecks"].append("‚úÖ Found variable assignments")
    else:
        print("‚ùå No variable assignments found")
        results["structureChecks"].append("‚ùå No variable assignments found")
        passed = False
    
    # Check for different data types
    has_string = re.search(r'["\'].*["\']', code)
    has_number = re.search(r'\b\d+(\.\d+)?\b', code)
    has_boolean = re.search(r'\b(True|False)\b', code)
    has_list = re.search(r'\[.*\]', code)
    has_dict = re.search(r'\{.*\}', code)
    
    data_type_count = 0
    if has_string:
        print("‚úÖ Found string literal")
        results["structureChecks"].append("‚úÖ Found string literal")
        data_type_count += 1
    if has_number:
        print("‚úÖ Found number literal")
        results["structureChecks"].append("‚úÖ Found number literal")
        data_type_count += 1
    if has_boolean:
        print("‚úÖ Found boolean literal")
        results["structureChecks"].append("‚úÖ Found boolean literal")
        data_type_count += 1
    if has_list:
        print("‚úÖ Found list literal")
        results["structureChecks"].append("‚úÖ Found list literal")
        data_type_count += 1
    if has_dict:
        print("‚úÖ Found dictionary literal")
        results["structureChecks"].append("‚úÖ Found dictionary literal")
        data_type_count += 1
    
    if data_type_count >= 3:
        print(f"‚úÖ Found {data_type_count} different data types")
        results["structureChecks"].append(f"‚úÖ Found {data_type_count} different data types")
    else:
        print(f"‚ùå Only found {data_type_count} data types (need at least 3)")
        results["structureChecks"].append(f"‚ùå Only found {data_type_count} data types (need at least 3)")
        passed = False
    
    return passed

def check_functionality(code, results):
    try:
        # Simulate Python execution by parsing print statements
        import re
        print_matches = re.findall(r'print\([^)]+\)', code)
        
        if print_matches:
            print("‚úÖ Code contains print statements")
            outputs = []
            for match in print_matches:
                # Extract content from print()
                content = match[6:-1]  # Remove 'print(' and ')'
                # Simple string literal handling
                if (content.startswith('"') and content.endswith('"')) or \
                   (content.startswith("'") and content.endswith("'")):
                    outputs.append(content[1:-1])
                else:
                    outputs.append(content)
            
            results["output"] = '\n'.join(outputs)
            return True
        else:
            print("‚ùå No print statements found")
            results["warnings"].append("No print statements found")
            return False
    except Exception as error:
        print(f"‚ùå Functionality check error: {str(error)}")
        results["errors"].append(f"Functionality Error: {str(error)}")
        return False

def calculate_score(results):
    score = 0
    
    if results["syntaxCheckPassed"]:
        score += 30
    if results["structureCheckPassed"]:
        score += 50
    if results["functionalityCheckPassed"]:
        score += 20
    
    results["score"] = min(score, 100)
    
    print(f"üìä Final Score: {results['score']}/100")

# For browser compatibility, we'll use JavaScript-style export
# This will be handled by the Monaco Editor system
print("‚úÖ Test file loaded successfully")
print("Requirements:", ", ".join(test_config["requirements"]))